<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-40</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>toggle=0;

map_offset_x = ((view_wview[0]/2) div 8); //8 being the map tile size
map_offset_y = ((view_hview[0]/2) div 8);

x_map = 0;
y_map = 0;

//Create Grid for Map Reveal
vision_grid = ds_grid_create(obj_generator.grid_width,obj_generator.grid_height);
//Set Each Cell to Invisible
ds_grid_set_region(vision_grid,0,0,obj_generator.grid_width-1,obj_generator.grid_height-1,"VISIBLE")


//get grid bounds
low_x = obj_generator.grid_width;
high_x = 0;
low_y = obj_generator.grid_height;
high_y = 0;
for(var i=0;i&lt;obj_generator.grid_width;i++)
{
    for(var j=0;j&lt;obj_generator.grid_height;j++)
    {
        if(obj_generator.grid[# i,j] != VOID)
        {
           if(i &gt; high_x) high_x = i;
           if(i &lt; low_x) low_x = i;
           if(j &gt; high_y) high_y = j;
           if(j &lt; low_y) low_y = j; 
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle TAB
if(keyboard_check_pressed(vk_tab))
{
    if(toggle == 1 || toggle == 2)
    {
        if(map_offset_x != ((view_wview[0]/2) div 8) || map_offset_y != ((view_hview[0]/2) div 8))
        {
            map_offset_x = ((view_wview[0]/2) div 8);
            map_offset_y = ((view_hview[0]/2) div 8);
        }
        else scr_toggle_next() 
    }
    else scr_toggle_next() 
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Scroll map
up = keyboard_check(vk_up);
down = keyboard_check(vk_down);
left = keyboard_check(vk_left);
right = keyboard_check(vk_right);


if up map_offset_y+=0.1;
if down map_offset_y-=0.1;
if left map_offset_x+=0.1;
if right map_offset_x-=0.1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pseudo Player View Pos
x_map = obj_player_parent.x - (view_wview[0]/2)-4;
y_map = obj_player_parent.y - (view_hview[0]/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_grid_destroy(vision_grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player_pos_x = obj_player_parent.x div CELL_WIDTH; 
player_pos_y = obj_player_parent.y div CELL_HEIGHT;

//set tiles in view to visible
var i_init = max(0,view_xview[0] div CELL_WIDTH);
var i_exp = min(obj_generator.grid_width-1,(view_xview[0]+view_wview[0]) div CELL_WIDTH)
var j_init = max(0,(view_yview[0] div CELL_HEIGHT))
var j_exp = min(obj_generator.grid_height-1,(view_yview[0]+view_hview[0]) div CELL_HEIGHT)
for(var i=i_init;i&lt;i_exp+1;i++)
{
    for(var j=j_init;j&lt;j_exp+1;j++)
    {
        vision_grid[# i,j] = "VISIBLE";
    }
}

//draw mini map
if(toggle == 0)//small
{
    //draw minimap border
    for(var i=0;i&lt;26;i++)
    {
        for(var j=0;j&lt;26;j++)
        {
            if(i=0 || i = 25 || j = 0 || j = 25)
            {
                draw_sprite(spr_border_map,-1,view_xview[0]+6+(4*i),view_yview[0]+26+(4*j))
            }
            
        }
        
    }
    
    //actual map
    var i_init = max(0,player_pos_x-12);
    var i_exp = min(player_pos_x+12,obj_generator.grid_width);
    var j_init = max(0,player_pos_y-12);
    var j_exp = min(player_pos_y+12,obj_generator.grid_height);
    
    for(var i=i_init;i&lt;i_exp;i++)
    {
        for(var j=j_init;j&lt;j_exp;j++)
        {
            if(vision_grid[# i,j] == "VISIBLE")
            {
                 xx = (i-player_pos_x)+12
                 yy = (j-player_pos_y)+12
                if(obj_generator.grid[# i,j] == WALL)
                {
                    draw_sprite(spr_wall_map,-1,view_xview[0]+10+(4*xx),view_yview[0]+30+(4*yy));
                    
                }
                else if(obj_generator.grid[# i,j] == FLOOR)
                {
                    draw_sprite(spr_floor_map,-1,view_xview[0]+10+(4*xx),view_yview[0]+30+(4*yy));
                }
                else draw_sprite(spr_void_map,-1,view_xview[0]+10+(4*xx),view_yview[0]+30+(4*yy));
                
                if(xx == 12 &amp;&amp; yy == 12)
                {
                    draw_sprite(spr_player_map,-1,view_xview[0]+10+(4*xx),view_yview[0]+30+(4*yy));
                }
            }
            

            
            
        }
    }
}
else if (toggle == 1) //Big
{
    for(var i=low_x;i&lt;high_x+1;i++)
    {
        for(var j=low_y;j&lt;high_y+1;j++)
        {
            if(vision_grid[# i,j] == "VISIBLE")
            {
                 xx = (i-player_pos_x)+map_offset_x;
                 yy = (j-player_pos_y)+map_offset_y;
                if(obj_generator.grid[# i,j] == WALL)
                {
                    draw_sprite_ext(spr_wall_map,-1,x_map+(8*xx),y_map+(8*yy),2,2,image_angle,image_blend,0.5);
                }
                else if(obj_generator.grid[# i,j] == FLOOR)
                {
                    draw_sprite_ext(spr_floor_map,-1,x_map+(8*xx),y_map+(8*yy),2,2,image_angle,image_blend,0.5);
                }
                else draw_sprite_ext(spr_void_map,-1,x_map+(8*xx),y_map+(8*yy),2,2,image_angle,image_blend,0.5);
                
                if(xx == map_offset_x &amp;&amp; yy == map_offset_y)
                {
                    draw_sprite_ext(spr_player_map,-1,x_map+(8*xx),y_map+(8*yy),2,2,image_angle,image_blend,0.5);
                }
            }
        }
    }
}
else if (toggle == 2)
{
    for(var i=low_x;i&lt;high_x+1;i++)
    {
        for(var j=low_y;j&lt;high_y+1;j++)
        {
            if(vision_grid[# i,j] == "VISIBLE")
            {
                 xx = (i-player_pos_x)+map_offset_x;
                 yy = (j-player_pos_y)+map_offset_y;
                if(obj_generator.grid[# i,j] == WALL)
                {
                    draw_sprite_ext(spr_wall_map,-1,view_xview[0]+(8*xx),view_yview[0]+(8*yy),2,2,image_angle,image_blend,0.5);
                }
                else if(obj_generator.grid[# i,j] == FLOOR)
                {
                    draw_sprite_ext(spr_floor_map,-1,view_xview[0]+(8*xx),view_yview[0]+(8*yy),2,2,image_angle,image_blend,0.5);
                }
                else draw_sprite_ext(spr_void_map,-1,view_xview[0]+(8*xx),view_yview[0]+(8*yy),2,2,image_angle,image_blend,0.5);
                
                if(xx == map_offset_x &amp;&amp; yy == map_offset_y)
                {
                    draw_sprite_ext(spr_player_map,-1,view_xview[0]+(8*xx),view_yview[0]+(8*yy),2,2,image_angle,image_blend,0.5);
                }
            }
        }
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
