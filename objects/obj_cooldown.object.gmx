<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-41</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cd_angle=360;
tex = sprite_get_texture(spr_global_cooldown,0); //insert sprite that you want to use (make sure it is square)
radius = sprite_get_width(spr_global_cooldown)/2; //insert sprite that you want to use
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy self %% range_conversion
if(duration &lt;= 0)
{
    instance_destroy();
}
else duration--;


cd_angle = scr_range_convert(0,init_duration,0,360,duration);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    //var i, steps, xx, yy, u, v;
    if(slot&gt;=4) offset = 12; else offset = 0;
    
    
    steps = 20; //this value sets the precision of the circle (the larger the more precise)
    
    draw_set_color(c_white);
    draw_primitive_begin_texture(pr_trianglefan,tex);
    draw_vertex_texture_colour(view_xview[view_current]+(view_wview[view_current]/2)+radius-128-48+(64*slot)+offset,view_yview[view_current]+(view_hview[view_current]-64)+radius-48,0.5,0.5,c_dkgray,1);
    for(var i = 0; i &lt;= steps; i += 1)
    {
      xx = radius + lengthdir_x(radius, 90+ cd_angle * i / steps);
      yy = radius + lengthdir_y(radius, 90+ cd_angle * i / steps);  
      u = xx/(radius*2);
      v = yy/(radius*2);
      draw_vertex_texture_colour(view_xview[view_current]+(view_wview[view_current]/2)+xx-128-48+(64*slot)+offset,view_yview[view_current]+(view_hview[view_current]-64)+yy-48,u,v,c_dkgray,1);
    }
    draw_primitive_end();





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
