<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i=0;i&lt;3;i++)
{
    bar_amount[i] = 0;
    bar_decay[i] = true;
    bar_lower_threshold[i] = 10;
    bar_upper_threshold[i] = 90;
    bar_decay_rate[i] = 0.1; //per second
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i=0;i&lt;3;i++)
{
    if(bar_decay[i])
    {
        bar_amount[i]-=bar_decay_rate[i]/room_speed;
    }
}


//DoT if 0 
for(var i=0;i&lt;3;i++)
{
    if(bar_amount[i] &lt;= 0)
    {
        if(instance_exists(obj_player))
        {   
            var amount = obj_player.total_health/10;
            obj_player.hp -= amount
            inst = instance_create(other.x,other.y,obj_floaty_damage);
            inst.text = string(-amount);
            inst.out_col = c_black;
            inst.in_col = c_white;
        }
        
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HP Bar
if(instance_exists(obj_player))
{
    draw_set_halign(fa_left);
    scr_text_outlined_scaled(view_xview[view_current]+16,view_yview[view_current],"Alcohol",c_white,c_black,1,1);
    draw_healthbar(view_xview[view_current]+32,view_yview[view_current]+32,view_xview[view_current]+64+32,view_yview[view_current]+128+32,bar_amount[0],c_black,c_green,c_red,3,true,true);
    draw_set_halign(fa_center);
    scr_text_outlined_scaled(view_xview[view_current]+16+48,view_yview[view_current]+128+32,bar_amount[0],c_white,c_black,1,1);
    
    draw_set_halign(fa_left);
    scr_text_outlined_scaled(view_xview[view_current]+16+128,view_yview[view_current],"XTC",c_white,c_black,1,1);
    draw_healthbar(view_xview[view_current]+32+128,view_yview[view_current]+32,view_xview[view_current]+64+32+128,view_yview[view_current]+128+32,bar_amount[1],c_black,c_green,c_red,3,true,true);
    draw_set_halign(fa_center);
    scr_text_outlined_scaled(view_xview[view_current]+16+48+128,view_yview[view_current]+128+32,bar_amount[1],c_white,c_black,1,1);
    
    draw_set_halign(fa_left);
    scr_text_outlined_scaled(view_xview[view_current]+16+128+128,view_yview[view_current],"Speed",c_white,c_black,1,1);
    draw_healthbar(view_xview[view_current]+32+128+128,view_yview[view_current]+32,view_xview[view_current]+64+32+128+128,view_yview[view_current]+128+32,bar_amount[2],c_black,c_green,c_red,3,true,true);
    draw_set_halign(fa_center);
    scr_text_outlined_scaled(view_xview[view_current]+16+48+128+128,view_yview[view_current]+128+32,bar_amount[2],c_white,c_black,1,1);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
